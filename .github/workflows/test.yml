---
"on":
  push:
    branches: [main, staging, trying]
  pull_request:
    branches: [main]

name: Test everything
jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-check-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test_offline:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    needs: check
    name: Offline tests
    runs-on: "${{ matrix.os }}"
    steps:
      - name: "Git: enable longpaths"
        run: git config --global core.longpaths true
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --offline"

  plex_tags:
    name: Prepare list of Plex docker image tags for testing
    needs: test_offline
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v2
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - id: set-tags
        run: |
          cargo build --package xtask
          tags=$(cargo run -q --package xtask -- get-last-plex-tags)
          echo "::set-output name=tags::$tags"

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-clippy-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: "rustfmt, clippy"
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: "--all -- --check"
      - name: Clippy with warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: "--all-targets --all-features -- -D warnings"
      - name: Clippy with nursery & tests
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: clippy
          args: "--all-targets --tests --all-features -- -D clippy::nursery -D warnings"

  test_on_real_server_anonymous:
    needs: [test_offline, plex_tags]
    name: Test on a real server (anonymous)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plex_server_version: ${{fromJson(needs.plex_tags.outputs.tags)}}
    env:
      X_PLEX_CLIENT_IDENTIFIER: "${{ secrets.X_PLEX_CLIENT_IDENTIFIER }}"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: "Test against real server [anonymous]"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag ${{ matrix.plex_server_version }}"
      - name: "Test against real server [anonymous + new attributes]"
        if: "matrix.plex_server_version == 'latest'"
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag ${{ matrix.plex_server_version }} --deny-unknown-fields"

  test_on_real_server_authenticated:
    if: "github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'"
    needs: [test_offline, plex_tags]
    name: Test on a real server (authenticated)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plex_server_version: ${{fromJson(needs.plex_tags.outputs.tags)}}
    env:
      X_PLEX_CLIENT_IDENTIFIER: "${{ secrets.X_PLEX_CLIENT_IDENTIFIER }}"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache cargo index and registry
        uses: actions/cache@v2
        with:
          path: "~/.cargo/registry\n~/.cargo/git\n"
          key: "${{ runner.os }}-dot-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ runner.os }}-dot-cargo-\n"
      - name: Cache cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: "${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}"
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: "Test against real server [authenticated]"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag ${{ matrix.plex_server_version }} --token '${{ secrets.PLEX_API_AUTH_TOKEN }}'"
      - name: "Test against real server [authenticated + new attributes]"
        if: "matrix.plex_server_version == 'latest'"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag ${{ matrix.plex_server_version }} --token '${{ secrets.PLEX_API_AUTH_TOKEN }}' --deny-unknown-fields"

  collect_coverage:
    needs: check
    name: Collect code coverage (with anonymous server)
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate code coverage
        run: |
          cargo +nightly tarpaulin --workspace --timeout 120 --out Xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
