---
"on":
  push:
    branches: [main, staging, trying]
  pull_request:
    branches: [main]

name: Test
jobs:
  msrv:
    name: MSRV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Get current MSRV from crates/plex-api/Cargo.toml
        id: current_msrv
        run: |
          msrv=$(cat crates/plex-api/Cargo.toml | grep rust-version | sed 's/.* = "//; s/"//')
          echo "::set-output name=msrv::$msrv"
      - name: Install the toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{steps.current_msrv.outputs.msrv}}
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache
      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-targets

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  check_nightly:
    name: Check (nightly)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test_offline:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    needs: check
    name: Offline tests
    runs-on: "${{ matrix.os }}"
    steps:
      - name: "Git: enable longpaths"
        run: git config --global core.longpaths true
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --offline"

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: "rustfmt, clippy"
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: "--all -- --check"
      - name: Clippy with warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: "--all-targets --all-features -- -D warnings"

  lints_nightly:
    name: Lints (nightly)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: "rustfmt, clippy"
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: "--all -- --check"
      - name: Clippy with warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: "--all-targets --all-features -- -D warnings"

  test_on_real_server_anonymous:
    needs: test_offline
    name: Test on a real server (anonymous)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        plex_server_version: ["1.27.2.5929-a806c5905","1.25.9.5721-965587f64","1.23.6.4881-e2e58f321"]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache-anonymous
      - name: "Test against real server [anonymous]"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag '${{ matrix.plex_server_version }}' --deny-unknown-fields"

  test_on_real_server_authenticated_free:
    if: "github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/trying'"
    needs: test_offline
    strategy:
      fail-fast: false
      matrix:
        plex_server_version: ["1.27.2.5929-a806c5905","1.25.9.5721-965587f64","1.23.6.4881-e2e58f321"]
    name: Test on a real server (authenticated free account)
    runs-on: ubuntu-latest
    env:
      X_PLEX_CLIENT_IDENTIFIER: "${{ secrets.X_PLEX_CLIENT_IDENTIFIER_FREE }}"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache-authenticated
      - name: "Test against real server [authenticated]"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag '${{ matrix.plex_server_version }}' --token '${{ secrets.PLEX_API_AUTH_TOKEN_FREE }}' --deny-unknown-fields"

  test_on_real_server_authenticated_plexpass:
    if: "github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/trying'"
    needs: test_offline
    strategy:
      fail-fast: false
      matrix:
        plex_server_version: ["1.27.2.5929-a806c5905","1.25.9.5721-965587f64","1.23.6.4881-e2e58f321"]
    name: Test on a real server (authenticated plexpass account)
    runs-on: ubuntu-latest
    env:
      X_PLEX_CLIENT_IDENTIFIER: "${{ secrets.X_PLEX_CLIENT_IDENTIFIER_PLEXPASS }}"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1.4.0
        with:
          sharedKey: cache-authenticated
      - name: "Test against real server [authenticated]"
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: "--package xtask -- test --online --docker-tag '${{ matrix.plex_server_version }}' --token '${{ secrets.PLEX_API_AUTH_TOKEN_PLEXPASS }}' --deny-unknown-fields"

  collect_coverage:
    needs: check
    name: Collect code coverage (with anonymous server)
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate code coverage
        run: |
          cargo +nightly tarpaulin --workspace --timeout 120 --out Xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
